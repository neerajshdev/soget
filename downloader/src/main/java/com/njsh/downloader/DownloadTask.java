/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.centicbhaiya.downloader;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.security.PublicKey;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class DownloadTask
{
    private static ExecutorService service = Executors.newCachedThreadPool();
    // this download task id
    private long id;
    private final URL url;
    private int bufferSize = 10;

    // downloaded bytes
    private long downloaded;

    private long contentSize;
    private boolean isPauseSupported;
    private UpdateListener updateListener;

    // dir and filename represents downloaded file
    private String dir;
    public String filename;
    private FileOutputStream ofStream;
    private InputStream iStream;
    private SpeedMeter meter;
    private State state;


    public enum State
    {
        Idle,
        Downloading,
        Paused,
        Finished, Failed, Canceled
    }

    public DownloadTask(URL url, String dir, String filename)
    {
        this.url = url;
        this.dir = dir;
        this.filename = filename;
        this.state = State.Idle;
        this.meter = new SpeedMeter();
    }


    public long getContentSize() throws IOException
    {
        long result;
        URLConnection uc = url.openConnection();
        result = uc.getContentLengthLong();
        if (uc instanceof HttpURLConnection)
        {
            ((HttpURLConnection) uc).disconnect();
        }
        return result;
    }


    public void setUpdateListener(UpdateListener upl)
    {
        this.updateListener = upl;
    }

    public void start()
    {
        service.submit(this::runDownload);
    }

    private void  runDownload()
    {
        if (state == State.Idle || state == State.Paused)
        {
            state = State.Downloading;
        } else
        {
            return;
        }

        try
        {
            ofStream = new FileOutputStream(new File(dir, filename));
            HttpURLConnection uc = (HttpURLConnection) url.openConnection();

            if (isPauseSupported)
            {
//                uc.setRequestProperty("Range", "bytes=" + downloaded + "-" + contentSize);
            }

            uc.connect();

            if (uc.getResponseCode() == HttpURLConnection.HTTP_OK
                    || uc.getResponseCode() == HttpURLConnection.HTTP_PARTIAL)
            {
                Map<String, List<String>> headers = uc.getHeaderFields();
                String acceptRanges = headers.get("Accept-Ranges").get(0);

                if (acceptRanges.equals("none"))
                {
                    isPauseSupported = false;
                } else
                {
                    isPauseSupported = true;
                }

                contentSize = uc.getContentLengthLong();
                iStream = uc.getInputStream();
                download();
            } else
            {
                state = State.Failed;
            }

            // release resources and close files
            release();
            uc.disconnect();

        } catch (IOException e)
        {
            throw new RuntimeException(e);
        }
    }

    private void release()
    {
        if (iStream != null)
        {
            try
            {
                iStream.close();
            } catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }

        if (ofStream != null)
        {
            try
            {
                ofStream.close();
            } catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }


        meter = null;
    }


    private void download() throws IOException
    {
        byte[] bytes = new byte[bufferSize * 1024];
        int len = iStream.read(bytes);
        downloaded += len;

        // start the speed meter again
        meter.start();

        while (len > 0 && state == State.Downloading)
        {
            ofStream.write(bytes, 0, len);
            len = iStream.read(bytes);
            downloaded += len;

            if (updateListener != null)
            {
                updateListener.onUpdateProgress(downloaded, contentSize);
                if (meter.update(len))
                {
                    updateListener.onUpdateSpeed(meter.getSpeedValue());
                }
            }
        }

        if (len == 0 && state == State.Downloading)
        {
            state = State.Finished;
        }
    }

    public void cancel()
    {
        state = State.Canceled;
    }

    public void pause()
    {
        if (isPauseSupported)
        {
            state = State.Paused;
        }
    }


    public boolean isPauseSupported()
    {
        return isPauseSupported;
    }

    public String getUrl()
    {
        return url.toString();
    }


    public String getPath()
    {
        return dir + "/" + filename;
    }

    public long getBytes()
    {
        return downloaded;
    }

    public State getState()
    {
        return state;
    }

    public long getSize()
    {
        return contentSize;
    }

    public long getId()
    {
        return id;
    }


    public void setId(long id)
    {
        this.id = id;
    }

}


/*

    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
if(ISSUE_DOWNLOAD_STATUS.intValue()==ECMConstant.ECM_DOWNLOADING){
        File file=new File(DESTINATION_PATH);
        if(file.exists()){
        downloaded = (int) file.length();
        connection.setRequestProperty("Range", "bytes="+(file.length())+"-");
        }
        }else{
        connection.setRequestProperty("Range", "bytes=" + downloaded + "-");
        }
        connection.setDoInput(true);
        connection.setDoOutput(true);
        progressBar.setMax(connection.getContentLength());
        in = new BufferedInputStream(connection.getInputStream());
        fos=(downloaded==0)? new FileOutputStream(DESTINATION_PATH): new FileOutputStream(DESTINATION_PATH,true);
        bout = new BufferedOutputStream(fos, 1024);
        byte[] data = new byte[1024];
        int x = 0;
        while ((x = in.read(data, 0, 1024)) >= 0) {
        bout.write(data, 0, x);
        downloaded += x;
        progressBar.setProgress(downloaded);
        }
*/
